{"version":3,"sources":["components/map/index.js","App.js","serviceWorker.js","index.js"],"names":["DEFAULT_VIEWPORT","zoom","lat","lng","Map","events","state","viewport","props","flying","loaded","onLoad","bounds","setState","isEmpty","bbox","fitBounds","map","mapContainer","onViewportChange","v","i","onResize","newViewport","onMoveEnd","bearing","getBearing","pitch","getPitch","getZoom","getCenter","latitude","longitude","options","width","offsetWidth","height","offsetHeight","WebMercatorViewport","transitionDuration","transitionInterruption","TRANSITION_EVENTS","UPDATE","setTimeout","prevProps","prevViewport","prevBounds","this","stateViewport","isEqual","customClass","children","dragPan","getCursor","dragRotate","scrollZoom","touchZoom","touchRotate","doubleClickZoom","mapboxProps","ref","r","className","classnames","getMap","transitionInterpolator","FlyToInterpolator","transitionEasing","easeCubic","Component","defaultProps","isHovering","isDragging","App","mapboxApiAccessToken","process","mapStyle","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.66d798cd.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport isEqual from 'lodash/isEqual';\nimport isEmpty from 'lodash/isEmpty';\n\nimport ReactMapGL, { FlyToInterpolator, TRANSITION_EVENTS } from 'react-map-gl';\nimport WebMercatorViewport from 'viewport-mercator-project';\n\nimport { easeCubic } from 'd3-ease';\n\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport './styles.scss';\n\nconst DEFAULT_VIEWPORT = {\n  zoom: 2,\n  lat: 0,\n  lng: 0\n}\n\nclass Map extends Component {\n  events = {}\n\n  static propTypes = {\n    /** A function that returns the map instance */\n    children: PropTypes.func,\n\n    /** Custom css class for styling */\n    customClass: PropTypes.string,\n\n    /** An object that defines the viewport\n     * @see https://uber.github.io/react-map-gl/#/Documentation/api-reference/interactive-map?section=initialization\n    */\n    viewport: PropTypes.shape({\n\n    }),\n\n    /** An object that defines the bounds */\n    bounds: PropTypes.shape({\n      bbox: PropTypes.array,\n      options: PropTypes.shape({})\n    }),\n\n    /** A boolean that allows panning */\n    dragPan: PropTypes.bool,\n\n    /** A boolean that allows rotating */\n    dragRotate: PropTypes.bool,\n\n    /** A boolean that allows zooming */\n    scrollZoom: PropTypes.bool,\n\n    /** A boolean that allows zooming */\n    touchZoom: PropTypes.bool,\n\n    /** A boolean that allows touch rotating */\n    touchRotate: PropTypes.bool,\n\n    /** A boolean that allows double click zooming */\n    doubleClickZoom: PropTypes.bool,\n\n    /** A function that exposes when the map is loaded. It returns and object with the `this.map` and `this.mapContainer` reference. */\n    onLoad: PropTypes.func,\n\n    /** A function that exposes the viewport */\n    onViewportChange: PropTypes.func,\n\n    /** A function that exposes the viewport */\n    getCursor: PropTypes.func\n  }\n\n  static defaultProps = {\n    children: null,\n    customClass: null,\n    viewport: DEFAULT_VIEWPORT,\n    bounds: {},\n    dragPan: true,\n    dragRotate: true,\n\n    onViewportChange: () => {},\n    onLoad: () => {},\n    getCursor: ({ isHovering, isDragging }) => {\n      if (isHovering) return 'pointer';\n      if (isDragging) return 'grabbing';\n      return 'grab';\n    }\n  }\n\n  state = {\n    viewport: {\n      ...DEFAULT_VIEWPORT,\n      ...this.props.viewport // eslint-disable-line\n    },\n    flying: false,\n    loaded: false\n  }\n\n  componentDidUpdate(prevProps) {\n    const { viewport: prevViewport, bounds: prevBounds } = prevProps;\n    const { viewport, bounds } = this.props;\n    const { viewport: stateViewport } = this.state;\n\n    if (!isEqual(viewport, prevViewport)) {\n      this.setState({ // eslint-disable-line\n        viewport: {\n          ...stateViewport,\n          ...viewport\n        }\n      });\n    }\n\n    if (!isEmpty(bounds) && !isEqual(bounds, prevBounds)) {\n      this.fitBounds();\n    }\n  }\n\n  onLoad = () => {\n    const { bounds, onLoad } = this.props;\n    this.setState({ loaded: true });\n\n    if (!isEmpty(bounds) && !!bounds.bbox) {\n      this.fitBounds();\n    }\n\n    onLoad({\n      map: this.map,\n      mapContainer: this.mapContainer\n    })\n  }\n\n  onViewportChange = (v, i) => {\n    const { onViewportChange } = this.props;\n\n    this.setState({ viewport: v });\n    onViewportChange(v);\n  }\n\n  onResize = (v) => {\n    const { onViewportChange } = this.props;\n    const { viewport } = this.state;\n    const newViewport = {\n      ...viewport,\n      ...v\n    };\n\n    this.setState({ viewport: newViewport });\n    onViewportChange(newViewport);\n  }\n\n  onMoveEnd = () => {\n    const { onViewportChange } = this.props;\n    const { viewport } = this.state;\n\n    if (this.map) {\n      const bearing = this.map.getBearing();\n      const pitch = this.map.getPitch();\n      const zoom = this.map.getZoom();\n      const { lng, lat } = this.map.getCenter();\n\n      const newViewport = {\n        ...viewport,\n        bearing,\n        pitch,\n        zoom,\n        latitude: lat,\n        longitude: lng\n      };\n\n      // Publish new viewport and save it into the state\n      this.setState({ viewport: newViewport });\n      onViewportChange(newViewport);\n    }\n  }\n\n  fitBounds = () => {\n    const { viewport } = this.state;\n    const { bounds, onViewportChange } = this.props;\n    const { bbox, options } = bounds;\n\n    const v = {\n      width: this.mapContainer.offsetWidth,\n      height: this.mapContainer.offsetHeight,\n      ...viewport\n    }\n\n    const { longitude, latitude, zoom } = new WebMercatorViewport(v).fitBounds(\n      [[bbox[0], bbox[1]], [bbox[2], bbox[3]]],\n      options\n    );\n\n    const newViewport = {\n      ...this.state.viewport,\n      longitude,\n      latitude,\n      zoom,\n      transitionDuration: 2500,\n      transitionInterruption: TRANSITION_EVENTS.UPDATE\n    }\n\n    this.setState({\n      flying: true,\n      viewport: newViewport\n    });\n    onViewportChange(newViewport);\n\n    setTimeout(() => {\n      this.setState({ flying: false });\n    }, 2500);\n  };\n\n  render() {\n    const { customClass, children, getCursor, dragPan, dragRotate, scrollZoom, touchZoom, touchRotate, doubleClickZoom, ...mapboxProps } = this.props;\n    const { viewport, loaded, flying } = this.state;\n\n    return (\n      <div\n        ref={r => { this.mapContainer = r}}\n        className={classnames({\n          \"c-map\": true,\n          [customClass]: !!customClass\n        })}\n      >\n        <ReactMapGL\n          ref={map => { this.map = map && map.getMap(); }}\n\n          // CUSTOM PROPS FROM REACT MAPBOX API\n          {...mapboxProps}\n\n          // VIEWPORT\n          {...viewport}\n          width=\"100%\"\n          height=\"100%\"\n\n          // INTERACTIVE\n          dragPan={!flying && dragPan}\n          dragRotate={!flying && dragRotate}\n          scrollZoom={!flying && scrollZoom}\n          touchZoom={!flying && touchZoom}\n          touchRotate={!flying && touchRotate}\n          doubleClickZoom={!flying && doubleClickZoom}\n\n          // DEFAULT FUNC IMPLEMENTATIONS\n          onViewportChange={this.onViewportChange}\n          onResize={this.onResize}\n          onLoad={this.onLoad}\n          // getCursor={getCursor}\n\n          transitionInterpolator={new FlyToInterpolator()}\n          transitionEasing={easeCubic}\n        >\n          {loaded && !!this.map && typeof children === 'function' && children(this.map)}\n        </ReactMapGL>\n      </div>\n    );\n  }\n}\n\nexport default Map;","import React from 'react';\nimport Map from 'components/map';\n\nimport './App.scss'\n\nfunction App() {\n  return (\n    <div className=\"c-app\">\n      <Map\n        mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n        mapStyle=\"mapbox://styles/layer-manager/ck06v389m02u61cqq3qqd78hq\"\n      >\n        {(map) => {\n          // Layer Manager goes here\n        }}\n      </Map>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './styles/index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}